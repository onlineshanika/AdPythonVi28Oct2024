Advanced Python Programming
Trainer: Prashant Nair
===========================================================================================================================================================

Agenda
--------
Reading data from Table in View (hardcoded way)
Django Templates
Django Template Language
Namespacing and Removing Hardcoded URL


Lab1: Reading data from table in a view
==========================================

views.py on food app
====================

from django.shortcuts import render
from django.http import HttpResponse
from .models import Item

# Create your views here.

def index(request):
    item_list= Item.objects.all()
    return HttpResponse(item_list)

def item(request):
    return HttpResponse("This is an item page")


models.py in food app
======================

from django.db import models

# Create your models here.

class Item(models.Model):

    def __str__(self):
        return self.item_name

    item_name= models.CharField(max_length=200) #varchar(200)
    item_desc=models.CharField(max_length=200) #varchar(200)
    item_price=models.IntegerField() #int



Django Templates
=================

Django follows MVT Design pattern for web development

Model ------- Data store
View -------- Holds the Business logic to display/show results
Templates


When it comes to dynamic data handling in View page, in Django we have a special language to create template page called DTL(Django Template Language)



Lab2: Creating templates folder
==================================

1. Create templates folder inside food app
2. Create food folder inside templates folder
3. Add index.html page inside food folder

<html>
<head>
<title>Page Title</title>
</head>
<body>

<h1>This is a Heading</h1>
<p>This is a paragraph.</p>

</body>
</html>

4. Modify views.py in food app

def index(request):
    return render(request, 'food/index.html')



Lab3: Creating and using Context Variable
===========================================

context variable is a dictionary object

1. Update views.py
views.py

from django.shortcuts import render
from django.http import HttpResponse
from .models import Item

# Create your views here.

def index(request):
    context = {
        'name' : 'Prashant',
        'messages' : ['Welcome to Django Template Language', ' Test1', 'Test2']
    }
    return render(request, 'food/index.html', context)


2. Update index.html
index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Welcome {{ name }}</title>
</head>
<body>
    <h1>This is a sample page</h1>
    <ul>
        {% for message in messages %}
        <li> {{ message }} </li>
    {% endfor %}

    </ul>
    
</body>
</html>




Lab4: Accessing elements dynamically
======================================

Demo1: Using variable values from URL

Step1: Update views.py
views.py

from django.shortcuts import render,redirect
from django.http import HttpResponse
from .models import Item
from django.template import loader



def detail(request, item_id):
	return HttpResponse("This is item no : %s" % item_id)


Step2: Update urls.py of food app
urls.py (food app)

from django.urls import path
from . import views

urlpatterns=[
    #http://127.0.0.1:8000/food
    path('',views.index, name="index"),
    #http://127.0.0.1:8000/food/items
    path('items/',views.item, name="items"),
    #http://127.0.0.1:8000/food/1
    path('<int:item_id>',views.detail, name="detail")
]



Demo2 : Fetching relevant record from db object

1. Create a new template html inside templates/food/detail.html

detail.html

<h1>{{ itemDetails.item_name }}</h1>
<h2>{{ itemDetails.item_desc }}</h2>
<h3>{{ itemDetails.item_price }}</h3>

2. Update views.py to fetch data from item model.

views.py

def detail(request,item_id):
    item = Item.objects.get(pk=item_id) #select * from item where id=item_id
    context = {
        'itemDetails' : item,
    }
    return render(request, 'food/detail.html', context)


3. To access items 

http://127.0.0.1:8000/food/1

lab 5: Create link in home page to access details of each item
==============================================================

index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome {{ name }}</title>
</head>
<body>
    <h1>This is a sample page</h1>
    <ul>
        {% for message in messages %}
        <li> <a href="{{ message.id }}">{{message.item_name}} </a> </li>
    {% endfor %}

    </ul>
    
</body>
</html>


views.py

def index(request):
    item = Item.objects.all()
    context = {
           'messages': item
    }
    return render(request, 'food/index.html', context=context)



















